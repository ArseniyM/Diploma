-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


DROP TABLE IF EXISTS public.department;

CREATE TABLE IF NOT EXISTS public.department
(
    id integer NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT department_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.employee;

CREATE TABLE IF NOT EXISTS public.employee
(
    id integer NOT NULL,
    surname character varying COLLATE pg_catalog."default" NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    patronymic character varying COLLATE pg_catalog."default",
    "dateBirth" date NOT NULL,
    login character varying COLLATE pg_catalog."default" NOT NULL,
    password character varying COLLATE pg_catalog."default" NOT NULL,
    blocked boolean NOT NULL DEFAULT false,
    new boolean NOT NULL DEFAULT true,
    CONSTRAINT employee_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."employeePost";

CREATE TABLE IF NOT EXISTS public."employeePost"
(
    post integer NOT NULL,
    employee integer NOT NULL,
    CONSTRAINT "employeePost_pkey" PRIMARY KEY (post, employee)
);

DROP TABLE IF EXISTS public.message;

CREATE TABLE IF NOT EXISTS public.message
(
    id integer NOT NULL,
    employee integer NOT NULL,
    task integer NOT NULL,
    text character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT message_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.notification;

CREATE TABLE IF NOT EXISTS public.notification
(
    id integer NOT NULL,
    employee integer NOT NULL,
    text character varying COLLATE pg_catalog."default" NOT NULL,
    date date NOT NULL,
    new boolean NOT NULL DEFAULT true,
    CONSTRAINT notification_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.phase;

CREATE TABLE IF NOT EXISTS public.phase
(
    id integer NOT NULL,
    project integer NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT phase_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.post;

CREATE TABLE IF NOT EXISTS public.post
(
    id integer NOT NULL,
    department integer NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    "userGroup" boolean NOT NULL DEFAULT true,
    CONSTRAINT post_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.project;

CREATE TABLE IF NOT EXISTS public.project
(
    id integer NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    "startDate" date NOT NULL,
    comment character varying COLLATE pg_catalog."default",
    completed boolean NOT NULL DEFAULT false,
    "completDate" date,
    CONSTRAINT project_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."projectEmployee";

CREATE TABLE IF NOT EXISTS public."projectEmployee"
(
    employee integer NOT NULL,
    project integer NOT NULL,
    CONSTRAINT "projectEmployee_pkey" PRIMARY KEY (employee, project)
);

DROP TABLE IF EXISTS public.status;

CREATE TABLE IF NOT EXISTS public.status
(
    id integer NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT status_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.task;

CREATE TABLE IF NOT EXISTS public.task
(
    id integer NOT NULL,
    phase integer NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    executor integer NOT NULL,
    " dateComplet" date NOT NULL,
    status integer NOT NULL DEFAULT 1,
    responsible integer NOT NULL,
    comment character varying COLLATE pg_catalog."default",
    CONSTRAINT task_pkey PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."taskLink";

CREATE TABLE IF NOT EXISTS public."taskLink"
(
    "mainTask" integer NOT NULL,
    "dependentTask" integer NOT NULL,
    CONSTRAINT "taskLink_pkey" PRIMARY KEY ("mainTask", "dependentTask")
);

ALTER TABLE IF EXISTS public."employeePost"
    ADD CONSTRAINT "fk_employeePost_employee" FOREIGN KEY (employee)
    REFERENCES public.employee (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."employeePost"
    ADD CONSTRAINT "fk_employeePost_post" FOREIGN KEY (post)
    REFERENCES public.post (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.message
    ADD CONSTRAINT message_employee_fkey FOREIGN KEY (employee)
    REFERENCES public.employee (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.message
    ADD CONSTRAINT message_task_fkey FOREIGN KEY (task)
    REFERENCES public.task (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.notification
    ADD CONSTRAINT notification_employee_fkey FOREIGN KEY (employee)
    REFERENCES public.employee (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.phase
    ADD CONSTRAINT phase_project_fkey FOREIGN KEY (project)
    REFERENCES public.project (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.post
    ADD CONSTRAINT fk_post_of_department FOREIGN KEY (department)
    REFERENCES public.department (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."projectEmployee"
    ADD CONSTRAINT "projectEmployee_employee_fkey" FOREIGN KEY (employee)
    REFERENCES public.employee (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."projectEmployee"
    ADD CONSTRAINT "projectEmployee_project_fkey" FOREIGN KEY (project)
    REFERENCES public.project (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.task
    ADD CONSTRAINT task_executor_fkey FOREIGN KEY (executor)
    REFERENCES public.employee (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.task
    ADD CONSTRAINT task_phase_fkey FOREIGN KEY (phase)
    REFERENCES public.phase (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.task
    ADD CONSTRAINT task_responsible_fkey FOREIGN KEY (responsible)
    REFERENCES public.employee (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.task
    ADD CONSTRAINT task_status_fkey FOREIGN KEY (status)
    REFERENCES public.status (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."taskLink"
    ADD CONSTRAINT "taskLink_dependentTask_fkey" FOREIGN KEY ("dependentTask")
    REFERENCES public.employee (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."taskLink"
    ADD CONSTRAINT "taskLink_mainTask_fkey" FOREIGN KEY ("mainTask")
    REFERENCES public.task (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;
